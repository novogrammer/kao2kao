import Head from 'next/head'
import { useRef ,useState} from 'react';
import { useMount,useUnmount } from "react-use";
import ClientApp from "../client/ClientApp";
import RemoteVideo from '../components/RemoteVideo';
import getConfig from "next/config";
const { publicRuntimeConfig } = getConfig();


export default function Home({iceServers}) {
  const clientAppRef=useRef(null);
  const localVideoRef=useRef(null);
  const [remoteIsMuted,setRemoteIsMuted]=useState(true);
  const [remoteList,setRemoteList]=useState([]);

  useMount(async ()=>{
    const localVideo=localVideoRef.current;
    const clientApp=new ClientApp({
      localVideo,
      setRemoteList,
      iceServers,
    });
    window.clientApp=clientApp;
    clientAppRef.current=clientApp;
    await clientApp.setupPromise;
  });
  useUnmount(async ()=>{
    const clientApp=clientAppRef.current;
    await clientApp.destroyAsync();
  });

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <label>remoteIsMuted <input type="checkbox" checked={remoteIsMuted} onChange={()=>setRemoteIsMuted(!remoteIsMuted)}/></label>
      <main>
      <video ref={localVideoRef} autoPlay playsInline muted />
      <>
        {remoteList.map((remote)=><RemoteVideo key={remote.peerId} stream={remote.stream} muted={remoteIsMuted} />)}
      </>
      </main>

    </div>
  )
}

export async function getServerSideProps(context){
  const iceServers=[
    {
      urls: process.env.STUN_SERVER_URI,
    }
  ];

  return {
    props:{
      iceServers,
    },
  };
}