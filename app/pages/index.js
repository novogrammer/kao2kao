import Head from 'next/head'
import { useRef ,useState} from 'react';
import { useMount,useUnmount } from "react-use";
import MainClientApp from '../client/MainClientApp';
// import RemoteVideo from '../components/RemoteVideo';
import Button from "../components/Button";
// import getConfig from "next/config";
// const { publicRuntimeConfig } = getConfig();

import styles from "../styles/Home.module.scss";

export default function Home({iceServers}) {
  const clientAppRef=useRef(null);
  const localVideoRef=useRef(null);
  const [joined,setJoined]=useState(false);

  const viewRef=useRef(null);

  useMount(async ()=>{
    const localVideo=localVideoRef.current;
    const view=viewRef.current;
    const clientApp=new MainClientApp({
      localVideo,
      iceServers,
      view,
      setJoined,
    });
    window.clientApp=clientApp;
    clientAppRef.current=clientApp;
    await clientApp.setupPromise;
  });
  useUnmount(async ()=>{
    const clientApp=clientAppRef.current;
    await clientApp.destroyAsync();
  });
  const onClickJoin=()=>{
    const clientApp=clientAppRef.current;
    clientApp.onClickJoin();
  }
  const cameraClassNames=[
    styles["waiting__camera"],
  ];
  if(joined){
    cameraClassNames.push(styles["waiting__camera--joined"]);
  }
  const onButtonDown=(name)=>{
    const clientApp=clientAppRef.current;
    clientApp.onButtonDown(name);
  };
  const onButtonUp=(name)=>{
    const clientApp=clientAppRef.current;
    clientApp.onButtonUp(name);
  };
  const onTouchStart=(name,event)=>{
    event.preventDefault();
    onButtonDown(name,event);
  }
  const onTouchEnd=(name,event)=>{
    onButtonUp(name,event);
  }
  const onTouchCancel=(name,event)=>{
    onButtonUp(name,event);
  }

  return (
    <div className={styles.home}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <div className={styles.background}>
        <canvas ref={viewRef}></canvas>
      </div>
      <div className={styles.waiting}>
        <video className={cameraClassNames.join(" ")} ref={localVideoRef} autoPlay playsInline muted />
        {!joined && <button className={styles.waiting__join} onClick={onClickJoin}>join</button>}
      </div>
      <div className={styles.controller}>
      <Button
          className={styles.controller__up}
          onButtonDown={onButtonDown}
          onButtonUp={onButtonUp}
          buttonName="ButtonUp"
        >up</Button>
        <Button
          className={styles.controller__left}
          onButtonDown={onButtonDown}
          onButtonUp={onButtonUp}
          buttonName="ButtonLeft"
        >left</Button>
        <Button
          className={styles.controller__down}
          onButtonDown={onButtonDown}
          onButtonUp={onButtonUp}
          buttonName="ButtonDown"
        >down</Button>
        <Button
          className={styles.controller__right}
          onButtonDown={onButtonDown}
          onButtonUp={onButtonUp}
          buttonName="ButtonRight"
        >right</Button>
      </div>

    </div>
  )
}

export async function getServerSideProps(context){
  const iceServers=[
    {
      urls: process.env.TURN_SERVER_URI,
      username:process.env.TURN_SERVER_USER,
      credential:process.env.TURN_SERVER_PASSWORD,
    },
  ];

  return {
    props:{
      iceServers,
    },
  };
}